// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScheduleTelegramBot.Data.EF;

#nullable disable

namespace ScheduleTelegramBot.Data.EF.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ScheduleTelegramBot.Core.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ScheduleTelegramBot.Core.Models.ScheduleDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScheduleWeekId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleWeekId");

                    b.ToTable("ScheduleDays");
                });

            modelBuilder.Entity("ScheduleTelegramBot.Core.Models.ScheduleLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonPosition")
                        .HasColumnType("int");

                    b.Property<int>("LessonType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ScheduleDayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleDayId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ScheduleLessons");
                });

            modelBuilder.Entity("ScheduleTelegramBot.Core.Models.ScheduleWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleWeeks");
                });

            modelBuilder.Entity("ScheduleTelegramBot.Core.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ScheduleTelegramBot.Core.Models.ScheduleDay", b =>
                {
                    b.HasOne("ScheduleTelegramBot.Core.Models.ScheduleWeek", null)
                        .WithMany("Days")
                        .HasForeignKey("ScheduleWeekId");
                });

            modelBuilder.Entity("ScheduleTelegramBot.Core.Models.ScheduleLesson", b =>
                {
                    b.HasOne("ScheduleTelegramBot.Core.Models.ScheduleDay", null)
                        .WithMany("Lessons")
                        .HasForeignKey("ScheduleDayId");

                    b.HasOne("ScheduleTelegramBot.Core.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ScheduleTelegramBot.Core.Models.ScheduleWeek", b =>
                {
                    b.HasOne("ScheduleTelegramBot.Core.Models.Schedule", null)
                        .WithMany("Weeks")
                        .HasForeignKey("ScheduleId");
                });

            modelBuilder.Entity("ScheduleTelegramBot.Core.Models.Schedule", b =>
                {
                    b.Navigation("Weeks");
                });

            modelBuilder.Entity("ScheduleTelegramBot.Core.Models.ScheduleDay", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("ScheduleTelegramBot.Core.Models.ScheduleWeek", b =>
                {
                    b.Navigation("Days");
                });
#pragma warning restore 612, 618
        }
    }
}
